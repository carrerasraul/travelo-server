{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","console","log","image","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,+MCoBEC,G,MAvBH,SAAAJ,GACV,IAAMK,EAASC,mBAEPC,EAAiBP,EAAjBO,OAAQC,EAASR,EAATQ,KAWhB,OATAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKT,IAAIC,EAAOS,QAAS,CACrDP,OAAQA,EACRC,KAAMA,IAGR,IAAIG,OAAOC,OAAOC,KAAKE,OAAO,CAAEC,SAAUT,EAAQG,IAAKA,MACtD,CAACH,EAAQC,IAGV,yBACES,IAAKZ,EACLJ,UAAS,cAASD,EAAMC,WACxBC,MAAOF,EAAME,U,gCCgGJgB,G,MA1GG,SAAClB,GAAW,IAAD,EAC2BmB,cAA9CC,EADmB,EACnBA,UAAWC,EADQ,EACRA,MAAOC,EADC,EACDA,YAAaC,EADZ,EACYA,WACjCC,EAAOC,qBAAWC,KAFG,EAIGC,oBAAS,GAJZ,mBAIpBC,EAJoB,KAIXC,EAJW,OAMqBF,oBAAS,GAN9B,mBAMpBG,EANoB,KAMFC,EANE,KAS3BC,QAAQC,IAAIjC,EAAMkC,OAClB,IAAMC,EAAkB,kBAAMN,GAAW,IAMnCO,EAAsB,WAC1BL,GAAoB,IAIhBM,EAAoB,uCAAG,sBAAAC,EAAA,6DAC3BP,GAAoB,GADO,kBAGnBT,EACJiB,8CAAA,kBAA+CvC,EAAMwC,IACrD,SACA,KACA,CACEC,cAAe,UAAYjB,EAAKkB,QARX,OAWzB1C,EAAM2C,SAAS3C,EAAMwC,IAXI,uGAAH,qDAe1B,OACE,kBAAC,IAAMI,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYxB,MAAOA,EAAOyB,QAASvB,IACnC,kBAACwB,EAAA,EAAD,CACEC,KAAMpB,EACNqB,SAAUd,EACVe,OAAQlD,EAAMmD,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAASrB,GAAjB,UAER,yBAAKlC,UAAU,iBACb,kBAAC,EAAD,CAAKM,OAAQP,EAAMyD,YAAajD,KAAM,OAG1C,kBAACuC,EAAA,EAAD,CACEC,KAAMlB,EACNmB,SAAUb,EACVc,OAAO,gBACPG,YAAY,4BACZC,OACE,kBAAC,IAAMV,SAAP,KACE,kBAACW,EAAA,EAAD,CAAQG,SAAO,EAACF,QAASpB,GAAzB,UAGA,kBAACmB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASnB,GAAxB,YAMJ,6HAKF,wBAAIpC,UAAU,cACZ,kBAACF,EAAA,EAAD,CAAME,UAAU,uBACbmB,GAAa,kBAACwC,EAAA,EAAD,CAAgBC,WAAS,IACvC,yBAAK5D,UAAU,qBACb,yBACE6D,IAAG,UAAKvB,0CAAL,YAAwCvC,EAAMkC,OACjD6B,IAAK/D,EAAMgE,SAGf,yBAAK/D,UAAU,oBACb,4BAAKD,EAAMgE,OACX,4BAAKhE,EAAMmD,SACX,2BAAInD,EAAMiE,cAEZ,yBAAKhE,UAAU,uBACb,kBAACsD,EAAA,EAAD,CAAQG,SAAO,EAACF,QA/EH,kBAAM3B,GAAW,KA+E9B,eAGCL,EAAK0C,SAAWlE,EAAMmE,WACrB,kBAACZ,EAAA,EAAD,CAAQa,GAAE,kBAAapE,EAAMwC,KAA7B,QAGDhB,EAAK0C,SAAWlE,EAAMmE,WACrB,kBAACZ,EAAA,EAAD,CAAQI,QAAM,EAACH,QAnFM,WAC/BzB,GAAoB,KAkFV,gBCrECsC,G,MA/BG,SAACrE,GACjB,OAA2B,IAAvBA,EAAMsE,MAAMC,OAEZ,yBAAKtE,UAAU,qBACb,kBAACF,EAAA,EAAD,KACE,kEACA,kBAACwD,EAAA,EAAD,CAAQa,GAAG,eAAX,iBAON,wBAAInE,UAAU,cACXD,EAAMsE,MAAM5D,KAAI,SAAC8D,GAAD,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAMhC,GACXA,GAAIgC,EAAMhC,GACVN,MAAOsC,EAAMtC,MACb8B,MAAOQ,EAAMR,MACbC,YAAaO,EAAMP,YACnBd,QAASqB,EAAMrB,QACfgB,UAAWK,EAAME,QACjBjB,YAAae,EAAMG,SACnBhC,SAAU3C,EAAM4E,sBCgBXC,UAvCI,WAAO,IAAD,EACiBlD,qBADjB,mBAChBmD,EADgB,KACFC,EADE,OAE+B5D,cAA9CC,EAFe,EAEfA,UAAWC,EAFI,EAEJA,MAAOC,EAFH,EAEGA,YAAaC,EAFhB,EAEgBA,WAEjC2C,EAASc,cAAYd,OAE3BzD,qBAAU,YACS,uCAAG,4BAAA6B,EAAA,+EAEWhB,EAAY,GAAD,OACjCiB,8CADiC,wBACgB2B,IAHtC,OAEVe,EAFU,OAKhBF,EAAgBE,EAAaC,QALb,uGAAH,qDAQjBC,KACC,CAAC7D,EAAa4C,IAQjB,OACE,kBAAC,IAAMtB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAYxB,MAAOA,EAAOyB,QAASvB,IAClCH,GACC,yBAAKnB,UAAU,UACb,kBAAC2D,EAAA,EAAD,QAGFxC,GAAa0D,GACb,kBAAC,EAAD,CAAWR,MAAOQ,EAAcF,cAfV,SAACQ,GAC3BL,GAAgB,SAACM,GAAD,OACdA,EAAWC,QAAO,SAACd,GAAD,OAAWA,EAAMhC,KAAO4C","file":"static/js/8.14652c42.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\n\nimport './Map.css';\n\nconst Map = props => {\n  const mapRef = useRef();\n  \n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom\n    });\n  \n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);  \n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItem.css';\n\nconst PlaceItem = (props) => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  // Set to false because we do not want to intially show the map\n  const [showMap, setShowMap] = useState(false);\n  // State that manages whether we confirm modal or not\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  // Toggles opening and closing map modal\n  const openMapHandler = () => setShowMap(true);\n  console.log(props.image);\n  const closeMapHandler = () => setShowMap(false);\n  // Controls warning that pops up when user clicks delete\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n  // Controls when user cancels after warning screen shows up\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  // Deletes place permanently\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: 'Bearer ' + auth.token,\n        }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass='place-item__modal-content'\n        footerClass='place-item__modal-actions'\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className='map-container'>\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header='Are you sure?'\n        footerClass='place-item__modal-actions'\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone thereafter.\n        </p>\n      </Modal>\n      <li className='place-item'>\n        <Card className='place-item__content'>\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className='place-item__image'>\n            <img\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\n              alt={props.title}\n            />\n          </div>\n          <div className='place-item__info'>\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className='place-item__actions'>\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport PlaceItem from './PlaceItem';\nimport Button from '../../shared/components/FormElements/Button';\nimport './PlaceList.css';\n\nconst PlaceList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className='place-list center'>\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to='/places/new'>Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ul className='place-list'>\n      {props.items.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport PlaceList from '../components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeletedHandler = (deletedPlaceId) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className='center'>\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}